package org.uengine.visualmashup.model;

import org.uengine.visualmashup.common.NotSupportedException;
import org.uengine.visualmashup.common.ValidationException;
import org.uengine.visualmashup.common.util.DateUtil;

import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;

/**
 * REST웹서비스 <-> MyBatis SQL Map 과 연동하는 동적 조건절 처리 클래스
 *
 * @author 이승백
 */
public class WhereClause {
    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table
     *
     * @mbggenerated
     */
    protected String orderByClause;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table
     *
     * @mbggenerated
     */
    protected boolean distinct;

    /**
     * This field was generated by MyBatis Generator.
     * This field corresponds to the database table
     *
     * @mbggenerated
     */
    protected List<Criteria> oredCriteria;

    /**
     * 결과셋 반환 시작위치
     */
    protected int offset = 0;

    /**
     * 결과셋 반환 갯수
     */
    protected int size = Integer.MAX_VALUE;

    public int getOffset() {
        return offset;
    }

    public void setOffset(int offset) {
        this.offset = offset;
    }

    public int getSize() {
        return size;
    }

    public void setSize(int size) {
        this.size = size;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public WhereClause() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public void setDistinct(boolean distinct) {
        this.distinct = distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public boolean isDistinct() {
        return distinct;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public Criteria or() {
        Criteria criteria = createCriteriaInternal();
        oredCriteria.add(criteria);
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table
     *
     * @mbggenerated
     */
    public void clear() {
        oredCriteria.clear();
        orderByClause = null;
        distinct = false;
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table
     *
     * @mbggenerated
     */
    protected abstract static class GeneratedCriteria {
        protected List<Criterion> criteria;

        protected GeneratedCriteria() {
            super();
            criteria = new ArrayList<Criterion>();
        }

        public boolean isValid() {
            return criteria.size() > 0;
        }

        public List<Criterion> getAllCriteria() {
            return criteria;
        }

        public List<Criterion> getCriteria() {
            return criteria;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteria.add(new Criterion(condition));
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value));
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            criteria.add(new Criterion(condition, value1, value2));
        }

        public Criteria andIsNull(String fieldName) {
            addCriterion(fieldName + " is null");
            return (Criteria) this;
        }

        public Criteria andIsNotNull(String fieldName) {
            addCriterion(fieldName + " is not null");
            return (Criteria) this;
        }

        public Criteria andEqualTo(String fieldName, Object value) {
            addCriterion(fieldName + " =", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andNotEqualTo(String fieldName, Object value) {
            addCriterion(fieldName + " <>", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andGreaterThan(String fieldName, Object value) {
            addCriterion(fieldName + " >", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andGreaterThanOrEqualTo(String fieldName, Object value) {
            addCriterion(fieldName + " >=", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andLessThan(String fieldName, Object value) {
            addCriterion(fieldName + " <", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andLessThanOrEqualTo(String fieldName, Object value) {
            addCriterion(fieldName + " <=", value, fieldName);
            return (Criteria) this;
        }

        public Criteria andLike(String fieldName, Object value) {
            addCriterion(fieldName + " like", value + "%", fieldName);
            return (Criteria) this;
        }

        public Criteria andNotLike(String fieldName, Object value) {
            addCriterion(fieldName + " not like", value + "%", fieldName);
            return (Criteria) this;
        }

        public Criteria andIn(String fieldName, List<Object> values) {
            addCriterion(fieldName + " in", values, fieldName);
            return (Criteria) this;
        }

        public Criteria andNotIn(String fieldName, List<Object> values) {
            addCriterion(fieldName + " not in", values, fieldName);
            return (Criteria) this;
        }

        public Criteria andBetween(String fieldName, Object value1, Object value2) {
            addCriterion(fieldName + " between", value1, value2, fieldName);
            return (Criteria) this;
        }

        public Criteria andNotBetween(String fieldName, Object value1, Object value2) {
            addCriterion(fieldName + " not between", value1, value2, fieldName);
            return (Criteria) this;
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table
     *
     * @mbggenerated do_not_delete_during_merge
     */
    public static class Criteria extends GeneratedCriteria {

        protected Criteria() {
            super();
        }
    }

    /**
     * This class was generated by MyBatis Generator.
     * This class corresponds to the database table
     *
     * @mbggenerated
     */
    public static class Criterion {
        private String condition;

        private Object value;

        private Object secondValue;

        private boolean noValue;

        private boolean singleValue;

        private boolean betweenValue;

        private boolean listValue;

        private String typeHandler;

        public String getCondition() {
            return condition;
        }

        public Object getValue() {
            return value;
        }

        public Object getSecondValue() {
            return secondValue;
        }

        public boolean isNoValue() {
            return noValue;
        }

        public boolean isSingleValue() {
            return singleValue;
        }

        public boolean isBetweenValue() {
            return betweenValue;
        }

        public boolean isListValue() {
            return listValue;
        }

        public String getTypeHandler() {
            return typeHandler;
        }

        protected Criterion(String condition) {
            super();
            this.condition = condition;
            this.typeHandler = null;
            this.noValue = true;
        }

        protected Criterion(String condition, Object value, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.typeHandler = typeHandler;
            if (value instanceof List<?>) {
                this.listValue = true;
            } else {
                this.singleValue = true;
            }
        }

        protected Criterion(String condition, Object value) {
            this(condition, value, null);
        }

        protected Criterion(String condition, Object value, Object secondValue, String typeHandler) {
            super();
            this.condition = condition;
            this.value = value;
            this.secondValue = secondValue;
            this.typeHandler = typeHandler;
            this.betweenValue = true;
        }

        protected Criterion(String condition, Object value, Object secondValue) {
            this(condition, value, secondValue, null);
        }
    }

    public static WhereClause conditionToWhereClause(List<Condition> conditionList) {
        WhereClause whereClause = new WhereClause();
        WhereClause.Criteria criteria = whereClause.createCriteria();

        String fieldName, fieldValue, dateFormat;
        String[] valueTokens;
        FieldTypeEnum fieldType;
        for (Condition condition : conditionList) {
            fieldName = condition.getFieldName();
            fieldValue = condition.getValue();
            fieldType = condition.getFieldType();
            dateFormat = condition.getDateFormat();

            if (fieldValue != null && !fieldValue.trim().equals("")) {

                switch (condition.getOperator()) {
                    case BETWEEN:
                        valueTokens = fieldValue.split(condition.getDelimiter());

                        criteria.andBetween(fieldName,
                                convertDataType(fieldType, valueTokens[0], dateFormat),
                                convertDataType(fieldType, valueTokens[1], dateFormat));
                        break;

                    case EQUAL:
                        criteria.andEqualTo(fieldName, convertDataType(fieldType, fieldValue, dateFormat));
                        break;

                    case GREATER_THAN:
                        criteria.andGreaterThan(fieldName, convertDataType(fieldType, fieldValue, dateFormat));
                        break;

                    case GREATER_THAN_OR_EQUAL:
                        criteria.andGreaterThanOrEqualTo(fieldName, convertDataType(fieldType, fieldValue, dateFormat));
                        break;

                    case IN:
                        valueTokens = fieldValue.split(condition.getDelimiter());
                        List<Object> valueObjList = new ArrayList<Object>();
                        for (String value : valueTokens) {
                            valueObjList.add(convertDataType(fieldType, value, dateFormat));
                        }
                        criteria.andIn(fieldName, valueObjList);
                        break;

                    case IS_NOT_NULL:
                        criteria.andIsNotNull(fieldName);
                        break;

                    case IS_NULL:
                        criteria.andIsNull(fieldName);
                        break;

                    case LESS_THAN:
                        criteria.andLessThan(fieldName, convertDataType(fieldType, fieldValue, dateFormat));
                        break;

                    case LESS_THAN_OR_EQUAL:
                        criteria.andLessThanOrEqualTo(fieldName, convertDataType(fieldType, fieldValue, dateFormat));
                        break;

                    case LIKE:
                        criteria.andLike(fieldName, convertDataType(fieldType, fieldValue, dateFormat));
                        break;

                    case NOT_EQUAL:
                        criteria.andNotEqualTo(fieldName, convertDataType(fieldType, fieldValue, dateFormat));
                        break;

                    case CUSTOM:
                        criteria.addCriterion(fieldValue);
                        break;

                    default:
                        throw new NotSupportedException("Not Support OperatorType " + condition.getOperator());
                }
            }
        }

        return whereClause;
    }

    private static Object convertDataType(FieldTypeEnum fieldTypeEnum, String fieldValue, String dateFormat) {
        switch (fieldTypeEnum) {
            case DATE:
                try {
                    return DateUtil.stringToDate(fieldValue, dateFormat);
                } catch (ParseException e) {
                    throw new ValidationException(e);
                }
            case FLOAT:
                return Float.parseFloat(fieldValue);
            case INT:
                return Integer.parseInt(fieldValue);
            case LONG:
                return Long.parseLong(fieldValue);
            case STRING:
                return fieldValue;
            case BOOLEAN:
                return Boolean.parseBoolean(fieldValue) ? "1" : "0";
            default:
                return fieldValue;
        }
    }
}